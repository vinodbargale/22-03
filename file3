
 3) fluent wait-
 
 -
 
 package testNg;

import java.time.Duration;
import java.util.NoSuchElementException;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

public class AssertionClass {
	
	WebDriver driver;
	@BeforeClass
	public void openBrowser() {

			
	System.setProperty("webdriver.chrome.driver", "C:\\Users\\Admin\\Desktop\\Slenium Jar\\Chrome_102\\chromedriver.exe");
			
			
			//Step -1 Launch browser 
			 driver =new ChromeDriver();
			
			//step-2 max window
			driver.manage().window().maximize();
			
			//step-3 open web application
			driver.get("https://chercher.tech/practice/explicit-wait-sample-selenium-webdriver");
			
			//step-4 dynamic wait
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
			
	}
	
	@Test
	public void verifyTitle() {
		
		driver.findElement(By.id("alert")).click();
		
		//explicit wait
		/*
		 * WebDriverWait wait=new WebDriverWait(driver,Duration.ofSeconds(10)) ;
		 * 
		 * wait.until(ExpectedConditions.alertIsPresent());
		 */
		
		//Fluent wait
		FluentWait <WebDriver> fwait=new FluentWait<WebDriver>(driver);
		
		fwait.withTimeout(Duration.ofSeconds(10)).pollingEvery(Duration.ofSeconds(2)).
		ignoring(NoSuchElementException.class);
		
		fwait.until(ExpectedConditions.alertIsPresent());
		
	
		driver.switchTo().alert().accept();
		
		
		
	}
	
	@AfterClass
	public void tearDown() throws InterruptedException {
		Thread.sleep(8000);
		driver.close();
	}

}



